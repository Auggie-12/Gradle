buildscript {
    dependencies {
        // 3.2.4 引入发布到 Jcenter 需要的依赖
//        classpath 'com.novoda:bintray-release:0.9'
    }
}
//
plugins {
    id 'java'
    id 'war'
//    id '插件名'  // 1.1 引入插件
    id 'maven-publish' // 3.2 发布引入插件
} // 等价于：plugins({...})

// 3.2.4 引用发布到 Jcenter 需要的插件
//apply plugin: 'com.novoda.bintray-release'

group 'cn.jt'   // 等价于：setGroup('cn.jt')
version '1.0-SNAPSHOT'

// 3.2.4 发布到jcenter的jar包信息
/*
publish {
    userOrg = 'auggie'
    repoName = 'maven'
    groupId = 'cn.jt'
    artifactId = 'last'
    publishVersion = '1.0.0'
    uploadName = 'gradle'
    desc = 'Oh hi, this is a nice description for nicelogger, right?'
//    website = 'https://github.com/auggie-12/nice-logger'
}
*/


// 1.2 自定义插件
class MyPlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        //新建task hello
        project.task('hello') {
            doLast {
                println 'Hello MyPlugin!'
            }
        }
    }
}
// 引入插件，观察 other 中任务变化
apply plugin: MyPlugin


repositories {
    mavenCentral()
//    jcenter()
    // 1.3 仓库配置
    /*
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    */
}

// 2.1 依赖管理
dependencies {
//    implementation 'cn.jt:last:1.0.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
//     2.1.1 引入具有传递依赖的 jar 包，hibernate依赖slf4j，会自动导入slf4j
    compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.3.Final'

    // 排除传递性依赖
//    compile (group: 'org.hibernate', name: 'hibernate-core', version: '3.6.3.Final'){
//        exclude group:'org.slf4j',module:'slf4j-api'//exclude 对某一个库排除传递依赖
//        //transitive = false  //排除所有的传递性依赖
//    }
    // 使用最新版本的依赖，必须使用占位符latest.integration，例如'org.slf4j:slf4j-api:latest.integration'
    // compile 'org.slf4j:slf4j-api:latest.integration'

}


// 2.1.2 gradle 默认自动解决版本冲突，可手动指定一个任一版本

configurations.all() {
    Configuration configuration ->
        // 禁止 gradle 自动解决冲突，当遇到版本冲突时直接构建失败
        configuration.resolutionStrategy.failOnVersionConflict()
        // 指定一个版本号，手动解决冲突
        configuration.resolutionStrategy.force(['org.slf4j:slf4j-api:1.7.25'])
}


// 2.2 单元测试

// 3.1 打包 （打包整个项目及其模块、打包指定模块）

// 3.2 发布 （先引入 maven-publish 插件）

publishing {
    // 3.2.1 发布到本地默认maven仓库
    publications {
        myPublish(MavenPublication){ // 定义 Maven-publications 类型的发布包名字
            //指定group/artifact/version信息，可以不填。
            // 默认使用项目group/name/version作为groupId/artifactId/version
            //groupId project.group
            //artifactId project.name
            //version project.version
            from components.java   // 添加 jar 组件到发布包列表中
            //  如果是war包则是from components.web
        }
    } // publishMyPublishPublicationToMavenLocal 即发布到本地默认的maven仓库

    // 3.2.2 发布到本地任意位置

//    repositories {
//        maven{
//            name 'myLocal'
//            url "E://"
//        }
//    } // 发布到本地自定义位置 publishMyPublishPublicationToMyLocalRepository


    // 3.2.3 发布到远程maven仓库，对其它团队或组织成员可用。如Artifactory，默
    // 认预配置了两个 maven 仓库：libs-snapshot-local（开发阶段）、libs-release-local（已经成型）
    // 配置 Artifactory 在 tomcat 上运行，先启动 tomcat，访问 http://localhost:8080/artifactory/webapp/home.html?16
    // 安装配置参考：https://wenku.baidu.com/view/5ad2a533ee06eff9aef8071d.html

//    repositories {
//        maven{
//            name 'remoteArtifactory'
//            url 'http://127.0.0.1:8080/artifactory/libs-snapshot-local'
//            credentials {
//                username = 'admin'     // artifactory_user
//                password = 'password'  // artifactory_password
//            }
//        }
//    } // publishMyPublishPublicationToRemoteArtifactoryRepository


    // 3.2.4 发布到公共的二进制仓库 如Jfrog Bintray的Jcenter以及Maven Central,以Jcenter为例
    // 需要先到 https://bintray.com/ 注册账号，创建名为 maven的仓库，创建一个gradle包。
    // 参考教程：https://blog.csdn.net/roly_yu/article/details/53486731

//    repositories {
//        maven {
//            name 'Bintray'
//            url  'https://api.bintray.com/maven/auggie/maven/gradle'
//            // https://api.bintray.com/maven/用户名/默认的maven仓库/包名
//            credentials { // 上传用的凭证
//                username = 'auggie'    // bintray_user 用户名
//                password = '60b371a22224505b23d9cf0b8eb9798d706bc703' // API Key 可在个人信息中查看
//            }
//        }
//    }
    // 图形界面操作无法 PUT jar包，使用终端：
    // gradle clean build bintrayUpload -PbintrayUser=auggie -PbintrayKey=60b371a22224505b23d9cf0b8eb9798d706bc703 -PdryRun=false
    // https://bintray.com/auggie 查看
}





